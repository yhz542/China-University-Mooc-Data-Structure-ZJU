#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#define INFINITY 65535
typedef int Vertex;
typedef int WeightType;
typedef struct ENode *PtrToENode;
struct ENode
{
        Vertex V1,V2;
        WeightType Weight;
};
typedef PtrToENode Edge;
typedef struct GNode *PtrToGNode;
struct GNode
{
        int Nv;
        int Ne;
        WeightType **G;
};
typedef PtrToGNode MGraph;
MGraph CreateGraph(int VertexNum);
void InsertEdge(MGraph Graph,Edge E);
MGraph BuildGraph(void);
void FindAnimal(MGraph Graph);
WeightType FindMaxDist(int N,WeightType (*D)[N],Vertex i);
void Floyd(MGraph Graph,WeightType D[][Graph->Nv]);
int main(void)
{

        MGraph Graph=BuildGraph();
        FindAnimal(Graph);
        return 0;
}
MGraph CreateGraph(int VertexNum)
{
        Vertex V,W;
        MGraph Graph;
        Graph=(MGraph)malloc(sizeof(struct GNode));
        Graph->Nv=VertexNum;
        Graph->Ne=0;
        Graph->G=(WeightType **)malloc(sizeof(WeightType *)*VertexNum);
        for(int i=0;i<VertexNum;i++)
        {
                Graph->G[i]=(WeightType *)malloc(sizeof(WeightType)*VertexNum);
        }
        for(V=0;V<VertexNum;V++)
                for(W=0;W<VertexNum;W++)
                        Graph->G[V][W]=INFINITY;
        return Graph;
}
void InsertEdge(MGraph Graph,Edge E)
{
        E->V1--;
        E->V2--;
        Graph->G[E->V1][E->V2]=E->Weight;
        Graph->G[E->V2][E->V1]=E->Weight;
}
MGraph BuildGraph(void)
{
        MGraph Graph;
        Edge E;
        Vertex V;
        int Nv,i;
        scanf("%d",&Nv);
        Graph=CreateGraph(Nv);
        scanf("%d",&(Graph->Ne));
        if(Graph->Ne)
        {
                E=(Edge)malloc(sizeof(struct ENode));
                for(i=0;i<Graph->Ne;i++)
                {
                        scanf("%d %d %d",&E->V1,&E->V2,&E->Weight);
                        InsertEdge(Graph,E);
                }
        }
        return Graph;
}
void FindAnimal(MGraph Graph)
{
        WeightType D[Graph->Nv][Graph->Nv],MaxDist,MinDist;
        Vertex Animal,i;
        Floyd(Graph,D);
        MinDist=INFINITY;
        for(i=0;i<Graph->Nv;i++)
        {
                MaxDist=FindMaxDist(Graph->Nv,D,i);
                if(MaxDist==INFINITY)
                {
                        printf("0\n");
                        return;
                }
                if(MinDist>MaxDist)
                {
                        MinDist=MaxDist;
                        Animal=i+1;
                }
        }
        printf("%d %d\n",Animal,MinDist);
}
WeightType FindMaxDist(int N,WeightType (*D)[N],Vertex i)
{
        WeightType MaxDist;
        Vertex j;
        MaxDist=0;
        for(j=0;j<N;j++)
        {
                if(i!=j&&D[i][j]>MaxDist)
                        MaxDist=D[i][j];
        }
        return MaxDist;
}
void Floyd(MGraph Graph,WeightType (*D)[Graph->Nv])
{
        Vertex i,j,k;
        for(i=0;i<Graph->Nv;i++)
                for(j=0;j<Graph->Nv;j++)
                        D[i][j]=Graph->G[i][j];
        for(k=0;k<Graph->Nv;k++)
                for(i=0;i<Graph->Nv;i++)
                        for(j=0;j<Graph->Nv;j++)
                                if(D[i][k]+D[k][j]<D[i][j])
                                {
                                        D[i][j]=D[i][k]+D[k][j];
                                }
}
